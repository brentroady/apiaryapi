FORMAT: 1A

# MockAPI
A mock up to see what calls are needed by the frontend code

# Group User
User related resources of the **API**

## Login [/login]
### Authenticate user [POST] 

+ Request (application/json)

        { 
            "login": "foo@example.com",
            "password": "abc123"
        }

+ Response 200 (application/json)

        { 
            "_links" : {
                "self": { "href": "/users/123" }
            },
            "id": "123" 
        }

+ Response 403 (application/json)

        { "message": "the credentials supplied are invalid" }

## Forgot password [/login/forgot]
### Forgot password [POST] 

+ Request (application/json)

        { 
            "login": "foo@example.com"
        }

+ Response 200 (application/json)

        { 
            "success": true,
            "message": "reset instructions have been sent"
        }

+ Response 401 (application/json)

        { 
            "success": false,
            "message": "the email address is not found" 
        }

## Reset password [/login/reset]
### Reset password [POST] 

+ Request (application/json)

        { 
            "userID": "123"
            "token": "xM4BzcKGgzq0LQAyPSPD"
            "newPassword": "MyNewCoolSecurePassword"
        }

+ Response 200 (application/json)

        { 
            "success": true,
            "message": "the password has been updated"
        }

+ Response 401 (application/json)

        { 
            "success": false,
            "message": "the password does not meet the complexity requirements" 
        }


## User [/user/{id}]
+ Model
    
    HAL+JSON representation

    + Body
    
            {
                "_links" : { "self": { "href": "/user/123" } },
                "id" : "123",
                "email" : "foo@example.com",
                "firstName" : "Mickey",
                "lastName" : "Mouse"
            }


### Get User [GET] 
+ Parameters
    + id (int, required, '123')
    
+ Response 200 (application/json)

    [User][]
    
+ Response 401

+ Response 403


### Update User [PUT] 
+ Parameters
    + id (int, required, '123')

+ Request (application/json)

        {
            "email" : "foo@example.com",
            "firstName" : "Mickey",
            "lastName" : "Mouse"
        }
    
+ Response 200 (application/json)

    [User][]
    
+ Response 401

+ Response 403

    
    